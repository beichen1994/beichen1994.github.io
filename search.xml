<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的git笔记</title>
      <link href="/2020/04/27/wo-de-git-bi-ji/"/>
      <url>/2020/04/27/wo-de-git-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>一开始我对git还是比较抵触，学习成本较高，因为不懂所以不知其便利。但终究还是没有忍住git对我的诱惑，便尝试了起来。我是按照<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰的git课程</a>进行学习的。目前我也只能算是入门，还远没有达到精通的地步。现将git的学习笔记进行一下整理。</p><p><img src="https://s1.ax1x.com/2020/04/27/Jf31Gq.jpg" alt="Jf31Gq.jpg"></p><ul><li>git初始配置</li></ul><pre><code>ssh -T git@github.comgit remote -vgit config --global user.name &quot;beichen1994&quot;git config --global user.email &quot;1768229565@qq.com&quot;git config --listssh-keygen</code></pre><ul><li><p>创建git仓库</p><pre><code>mkdir learngitcd learngitgit init</code></pre></li><li><p>将修改添加到暂存区，提交到Master分支</p></li></ul><pre><code>编写 file1.txt file2.txt file3.txtgit add file1.txtgit add file2.txt file3.txtgit commit -m &quot;update&quot;</code></pre><pre><code>继续修改 file1.txtgit status 查看仓库状态 git diff file1.txt 查看修改内容git add file1.txtgit commit -m &quot;update&quot;git status 查看仓库状态</code></pre><ul><li>版本回退</li></ul><pre><code>继续修改file1.txtgit add file1.txtgit commit -m &quot;udpate&quot;git log查看提交过程，目前file1.txt一共进行了三次提交，也就是有三个版本git reset --hard head^ 将file1.txt更改为第二次提交，顺便将工作区的文件进行了更新git log查看提交过程，目前只显示两次提交git reflog 查看所有提交历史，便于使用版本号进行resetgit reset --hard 1094 将file1.txt更改为1094号提交，顺便将工作区的文件进行了更新</code></pre><ul><li>撤销修改</li></ul><pre><code>git reset HEAD readme.txt如果file1.txt已经添加到暂存区，现在撤销暂存区的修改</code></pre><pre><code>git checkout -- file1.txt如果文件修改出问题，用版本库，即暂存区或者分支上的版本替换工作区的版本(撤销file1.txt在工作区的修改)</code></pre><ul><li>文件删除</li></ul><pre><code>先将工作区的file2.txt删除git rm file2.txt 将版本库中的文件删除git commit -m &quot;udpate&quot;</code></pre><pre><code>git checkout -- file2.txt如果文件删错了，用版本库中的文件替换工作区</code></pre><p>关联远程仓库</p><pre><code>git remote add origin git@github.com:beichen1994/Repo.gitgit push -u origin mastergit clone git@github.com:beichen1994/gitskills.git克隆到本地库</code></pre><p>使用git提交的时候出现The file will have its original line endings in your working directory.错误</p><p>1 git rm -r -f –cached ./ (删除缓存)<br>2 git add . （添加该目录下所有文件）<br>3 git push -u origin master （这时候提交就没问题了）</p><ul><li>分支管理</li></ul><pre><code>git branch dev创建dev分支git checkout dev然后切换到dev分支git branch查看所有分支修改file1.txtgit add file1.txtgit commit -m &quot;update&quot;git checkout master切换回master分支，发现file1.txt中的修改不见了git merge dev合并dev分支到当前分支 (master)git branch -d dev删除dev分支</code></pre><ul><li>解决冲突</li></ul><pre><code>git branch feature1git checkout feature1继续修改file1.txtgit add file1.txtgit commit -m &quot;update&quot;在feature1分支上提交修改git checkout master切换到master分支继续修改file1.txtgit add file1.txtgit commit -m &quot;update&quot;在master分支上提交git merge feature1两个分支上的file1.txt出现冲突将master分支上的file1.txt文件修改一下git add file1.txtgit commit -m &quot;update&quot;在master分支上继续提交git branch -d feature1删除feature1分支</code></pre><p>整个过程如下所示<br><img src="https://s1.ax1x.com/2020/04/27/JfyUgS.png" alt="JfyUgS.png"><br><img src="https://s1.ax1x.com/2020/04/27/JfyN38.png" alt="JfyN38.png"><br><img src="https://s1.ax1x.com/2020/04/27/Jfyt9f.png" alt="Jfyt9f.png"><br><img src="https://s1.ax1x.com/2020/04/27/JfylBd.png" alt="JfylBd.png"><br><img src="https://s1.ax1x.com/2020/04/27/Jfy1HA.png" alt="Jfy1HA.png"><br><img src="https://s1.ax1x.com/2020/04/27/Jfy8AI.png" alt="Jfy8AI.png"><br><img src="https://s1.ax1x.com/2020/04/27/JfyGNt.png" alt="JfyGNt.png"><br><img src="https://s1.ax1x.com/2020/04/27/JfyJ4P.png" alt="JfyJ4P.png"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><a href="https://blog.csdn.net/dongxiaocong/article/details/81450839" target="_blank" rel="noopener">电脑登录不了github</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的正则表达式总结</title>
      <link href="/2020/04/27/wo-de-zheng-ze-biao-da-shi-zong-jie/"/>
      <url>/2020/04/27/wo-de-zheng-ze-biao-da-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>正则表达式用途非常广泛，唯有熟才能生巧。我只是偶尔会用到，所以在这里学习并记录一下。以备翻阅。</p><hr><ul><li>主料</li></ul><pre><code>.匹配所有出现的单个字符（断行不行）..匹配所有出现的双字符...匹配所有出现的三字符....匹配所有出现的四字符\w匹配所有出现的0-9、大小写字母、下划线\W倒置\w\d匹配所有出现的单个数字\d\.\d可以匹配3.1\D倒置\d\s匹配所有出现的空格、tab、断行\S倒置\s[选择范围]匹配字符串中所有出现的该范围的任意字符组合[abc]匹配字符串所有出现的abc、所有出现的a、所有出现的b、所有出现的c、所有出现的ab、所有出现的bc、所有出现的ac、[a-z]匹配字符串中所有出现的a-z的所有组合[A-Z]匹配字符串中所有出现的A-Z的所有组合[0-9]匹配字符串中所有出现的0-9的所有组合\b词的边界</code></pre><hr><ul><li>配料</li></ul><pre><code>[范围]+范围内的任意字符组合重复一次或多次[yY][oO]+比如可以匹配yo、yoooo、Yo、YoOo[范围]*范围内的任意字符组合可选(重复0次或多次)[yY][oO]+[!~\.]*可以匹配yo、yooo、Yo、yo！、yo！！、yo[范围]？范围内的任意字符组合可选(重复0次或1次)[yY][oO]+p?[!~.]*可以匹配 yop!!、yooop、Yoop、yo、yooooo、yooo~~~[范围]{a,b}范围内的任意字符组合重复a-b次yo{2,}可以匹配yoo、yooo、yoooo（o至少出现2次）</code></pre><hr><pre><code>yo{0,1} 等同于 yo？yo{0,} 等同于 yo*yo{1,} 等同于 yo+.+飞飞, .+追追(.+)飞飞, (.+)追追李全单飞飞，王花花追追匹配到两组，一组是李全单，一组是王花花</code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Python学习笔记</title>
      <link href="/2020/04/27/wo-de-python-xue-xi-bi-ji/"/>
      <url>/2020/04/27/wo-de-python-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="turtle画个图"><a href="#turtle画个图" class="headerlink" title="turtle画个图"></a>turtle画个图</h2><pre><code>r=25area=3.1415926*r*rprint(area)`print(&quot;{:.2f}F&quot;.format(area))</code></pre><pre><code>import turtleturtle.pensize(20)turtle.circle(10)turtle.circle(40)turtle.circle(80)turtle.circle(160)</code></pre><h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>“””<br>“””</p><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>#</p><h2 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h2><p>字母 数字 下划线 汉字（数字不能开头）</p><h2 id="关键字："><a href="#关键字：" class="headerlink" title="关键字："></a>关键字：</h2><p>33个</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><p>100111101</p><p>范围无限大</p><pre><code>pow(x,y) </code></pre><h3 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h3><p>3.1415</p><pre><code>0.1+0.3--&gt;0.40.1+0.2--&gt;0.3000000000000004存在不确定尾数round(0.1+0.2,1)--&gt;0.3&lt;a&gt;e&lt;b&gt;  a*10^b9.6e5--&gt;960000.0</code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><pre><code>&quot;请输入带有符号的温度值&quot;&#39;C&#39; &#39;&#39;&#39; Python       语言&#39;&#39;&#39; 单引号中可以表示双引号双引号中可以表示单引号</code></pre><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><pre><code>... -5 -4 -3 -2 -1      0 1 2 3 4 5 6...  [start:end:step] 从start 提取到end - 1，每step 个字符提取一个  [start:] 从start 提取到结尾  [:end] 从开头提取到end - 1</code></pre><h3 id="操作函数"><a href="#操作函数" class="headerlink" title="操作函数"></a>操作函数</h3><pre><code>字符串操作函数x+y 连接x,yn*x  复制n次xx in s  x是否是s的子串</code></pre><h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h3><pre><code>len(x)str(x)  str(1.23) --&gt;&quot;1.23&quot;chr(u)    Unicode-&gt;单字符ord(x)    单字符 -&gt;Unicode</code></pre><h3 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h3><pre><code>str.lower() str.upper()str.split()    &quot;A B C&quot;.split(&quot;,&quot;) --&gt; [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]str.count(sub)  &quot;a apple a day&quot;.count(&quot;a&quot;)--&gt;4str.replace(old,new)str.center(width,&quot;fillchar&quot;)</code></pre><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><pre><code>用()或省或tuple()一旦创建不能修改</code></pre><pre><code>creature = &quot;cat&quot;,&quot;dog&quot;,&quot;monky&quot;,&quot;tiger&quot;print(creature)color =(0x001100,&quot;blue&quot;,creature)print(color)print(creature[::-1])</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><pre><code>用[]或list()</code></pre><pre><code>#数据保护a=[&quot;cat&quot;,&quot;dog&quot;,&quot;tiger&quot;,1024]b=tuple(a)b</code></pre><pre><code>函数ls.append(x)ls.clear()ls.copyls.insert(i,x)ls.pop(i)ls.remove(x)ls.reverse()</code></pre><h6 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h6><pre><code>{键1:值1,键2:值2,键3:值3........}dict()d.keys()d.values()d.items()  返回所有键值对信息d.get(k,default)d.pop(k,default)d.popitem()d.clear()len(d)</code></pre><pre><code>d ={&quot;中国&quot;:&quot;北京&quot;,&quot;美国&quot;:&quot;华盛顿&quot;,&quot;法国&quot;:&quot;巴黎&quot;}print(d)print(d.keys())print(d.values())</code></pre><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><pre><code>A={&quot;python&quot;,123,(&#39;python&#39;,123)}    #无序唯一print(A)B = set(&quot;pypy123&quot;)        #无序唯一print(B)</code></pre><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><pre><code>S|T  S&amp;T  S-T  S^T(补)  S&lt;=T S&lt;T(子集)S|=T S-=T S&amp;=T S^=T(更新集合S)</code></pre><pre><code>S = {&quot;p&quot;,&quot;y&quot;,123}T = set(&quot;pypy123&quot;) print(S|T)print(S&amp;T)print(S^T)print(T-S)print(S-T)</code></pre><h3 id="集合函数"><a href="#集合函数" class="headerlink" title="集合函数"></a>集合函数</h3><pre><code>S.add(x)S.discard(x)  移除，若不在，不报错S.remove(x)    移除，若不在，报错S.clear()S.pop()           随机返回一个元素S.copy()len(S)x in Sx not in Sset(x)        将x转为集合类型</code></pre><h3 id="集合去重"><a href="#集合去重" class="headerlink" title="集合去重"></a>集合去重</h3><pre><code>ls = [&quot;p&quot;,&quot;p&quot;,&quot;y&quot;,&quot;y&quot;,123]s = set(ls)print(s)</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><pre><code>x/y  除x//y 整数除x%y x**y  x的y次方xop=y x+=y x-=y x*=y x/=y</code></pre><h3 id="算数运算函数"><a href="#算数运算函数" class="headerlink" title="算数运算函数"></a>算数运算函数</h3><pre><code>abs(x) 绝对值divmod(x,y)  (x//y,x%y)pow(x,y)    x**ypow(x,y,z)  (x**y)%zround(x,d)max(x1,x2,x3,x4)min(x1,x2,x3,x4)int(x) float(x)     float(12) --&gt;12.0  float(&quot;1.23&quot;) --&gt; 1.23complex(x)   complex(4) --&gt; 4+0j</code></pre><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><pre><code>&lt;&gt;== !=&gt;=&lt;=</code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><pre><code>and or not</code></pre><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><h3 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h3><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><pre><code>if 条件：    执行语句elif 条件：    执行语句else:    执行简写：   &lt;表达式1&gt;if&lt;条件&gt;else&lt;表达式2&gt;</code></pre><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><pre><code>变量 = input(&quot;something&quot;)print(&quot;something&quot;) &quot;{1}计算机{0}的CPU占用率为{2}%&quot;.format(&quot;2018-101-10&quot;,&quot;C&quot;,10) {序号 ： &lt;填充&gt; &lt;对齐&gt; &lt;宽度&gt; &lt;,&gt; &lt;.精度&gt; &lt;类型&gt;}eval(字符串)将字符串str当成有效的表达式来求值并返回计算结果</code></pre><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><pre><code>for 变量 in 遍历结构:        执行语句1else:                  (一定执行)    执行语句2 </code></pre><pre><code>for i in range(N):    执行语句for i in range(M,N,K):    执行语句for c in &quot;python123&quot;:    print(c,end=&quot;,&quot;)    --&gt;p,y,t,h,o,n,1,2,3,for item in [123,&quot;PY&quot;,456]:    print(item,end=&quot;,&quot;)    ---&gt;123,PY,456for line in fi:    print(line)    ---&gt;    优美胜于丑陋    明了胜于隐晦    简洁胜于复杂</code></pre><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><pre><code>while 条件表达式:    执行语句1else:                     (一定执行)    执行语句2</code></pre><pre><code>a=3while a&gt;0:    a=a-1    print(a)</code></pre><pre><code>break 跳出循环continue 跳出本次循环</code></pre><h2 id="time库"><a href="#time库" class="headerlink" title="time库"></a>time库</h2><pre><code>import time# 时间获取print(time.gmtime()) #格林威治时间#时间格式化t=time.gmtime()print(time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;,t))## 程序计时start=time.perf_counter()end=time.perf_counter()print(end-start)&quot;&quot;&quot;#调用一次perf_counter()，从计算机系统里随机选一个时间点A，计算其距离当前时间点B1有多少秒。当第二次调用该函数时，默认从第一次调用的时间点A算起，距离当前时间点B2有多少秒。两个函数取差，即实现从时间点B1到B2的计时功能。&quot;&quot;&quot;## 睡眠def wait():    time.sleep(3)wait()</code></pre><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><pre><code>scale = 10print(&quot;--执行开始--&quot;)for i in range(scale+1):    a = &#39;*&#39;*i    b = &#39;.&#39;*(scale-i)    c = (i/scale)*100    print(&quot;{:^3.0f}%[{}-{}]&quot;.format(c,a,b))    time.sleep(0.1)print(&quot;--执行结束--&quot;)</code></pre><h2 id="单行动态刷新"><a href="#单行动态刷新" class="headerlink" title="单行动态刷新"></a>单行动态刷新</h2><pre><code># 默认end=&quot;\n&quot;  光标退回到原来位置for i in range(101):    print(&quot;\r{:.3f}%&quot;.format(i),end=&quot;&quot;)       time.sleep(0.1)</code></pre><h2 id="进度条-1"><a href="#进度条-1" class="headerlink" title="进度条"></a>进度条</h2><pre><code>str.center(width, fillchar)返回一个在指定的宽度 width中 且居中的字符串，fillchar 为填充的字符，默认为空格</code></pre><pre><code>import timescale = 50print(&quot;执行开始&quot;.center(scale//2,&quot;-&quot;))  # 填充start = time.perf_counter()for i in range(scale+1):    a = &#39;*&#39;*i    b = &#39;.&#39;*(scale - i)    c = (i/scale)*100    dur = time.perf_counter()-start    print(&quot;\r{:^3.0f}%[{}-{}]{:.2f}s&quot;.format(c,a,b,dur),end=&quot;&quot;) #默认end=&quot;\n&quot;    time.sleep(0.1)print(&quot;\n&quot;+&quot;执行结束&quot;.center(scale//2,&#39;-&#39;))</code></pre><h2 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h2><h3 id="基本随机数函数"><a href="#基本随机数函数" class="headerlink" title="基本随机数函数"></a>基本随机数函数</h3><pre><code>random.seed(10)random.random()   0.0-1.0之间的随机小数</code></pre><h3 id="扩展随机数函数"><a href="#扩展随机数函数" class="headerlink" title="扩展随机数函数"></a>扩展随机数函数</h3><pre><code>random.randint(a,b)      a-b之间的随机整数random.randrange(m,n,k)    m-n之间步长为k的随机整数random.getrandbits(k)         kbit长的随机整数</code></pre><pre><code>random.uniform(a,b)            a-b之间的随机小数random.choice(seq)             从seq中随机选择一个  random.shuffle(seq)               将seq打乱</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><pre><code>try :    语句1 except:         (出错执行)    语句2else:            (正常执行)    语句3finally:          (一定会执行)    语句4</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>def 函数名(参数):    函数体    return 返回值</code></pre><pre><code>def getNum():      #获取用户不定长度的输入    nums=[]    iNumStr = input(&quot;请输入数字(回车退出)&quot;)    while iNumStr != &quot;&quot;:        nums.append(eval(iNumStr))        iNumStr = input(&quot;请输入数字(回车退出)&quot;)    return numsdef mean(numbers):    #计算平均值    s=0.0    for num in numbers:        s+=num    return s/len(numbers)def dev(numbers,mean):   #计算方差    sdev = 0.0    for num in numbers:        sdev = sdev+(num-mean)**2    return pow(sdev/(len(numbers)-1),0.5)def median(numbers):     #计算中位数    sorted(numbers)    size = len(numbers)    if size %2 ==0:        med = (numbers[size//2-1]+numbers[size//2])/2    else:        med = numbers[size//2]    return medn = getNum()m = mean(n)print(&quot;平均值:{},方差:{:.2},中位数:{}&quot;.format(m,dev(n,m)),median(n))</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><pre><code>变量名 = open(文件名,打开方式)变量名.close()</code></pre><pre><code>rt rb   以读模式打开，指针回到开头r+      以读写模式打开，指针回到开头，文件不存在报错wt wb   以写模式打开，指针回到开头w+       以读写模式打开，指针回到开头，文件不存在新建a       以写模式打开，指针在结尾，文件不存在新建a+     以读写模式打开，指针在结尾，文件不存在新建</code></pre><h3 id="文件内容读取"><a href="#文件内容读取" class="headerlink" title="文件内容读取"></a>文件内容读取</h3><pre><code>&lt;f&gt;.read(size)    读全部内容，前size长度的&lt;f.&gt;readline(size)  读一行内容，前size长度的&lt;f&gt;.readlines(hint) 读所有行，以每行为元素形成列表，前hint行的</code></pre><h3 id="文件内容写入"><a href="#文件内容写入" class="headerlink" title="文件内容写入"></a>文件内容写入</h3><pre><code>&lt;f&gt;.write(s)&lt;f&gt;.writelines(lines)&lt;f&gt;.seek(offset) 0 -开头 1-当前位置 2-结尾</code></pre><pre><code># 文本文件tf = open(&quot;f.txt&quot;,&quot;rt&quot;)print(tf.readline())tf.close()</code></pre><pre><code>#二进制文件bf = open(&quot;f.txt&quot;,&quot;rb&quot;)print(bf.readline())bf.close()</code></pre><pre><code>fo = open(&quot;output.txt&quot;,&quot;w+&quot;)ls =[&quot;中国&quot;,&quot;法国&quot;,&quot;美国&quot;]fo.writelines(ls)        # 可以写进去fo.seek(0)               #指针回到开头，打印出来for line in fo:    print(line)fo.close()</code></pre><h2 id="yield用法"><a href="#yield用法" class="headerlink" title="yield用法"></a>yield用法</h2><p>先把yield看成return<br>但return返回一个值后，程序结束</p><pre><code>def fun():    print(&quot;开始...&quot;)    while True:        res = yield 4        print(&quot;res:&quot;,res)g = fun()print(next(g))print(&quot;*&quot;*20)print(next(g))</code></pre><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><ol><li><p>程序开始执行以后，因为fun函数中有yield关键字，所以fun函数并不会真的执行，<br>而是先得到一个生成器g(相当于一个对象)</p></li><li><p>直到调用next方法，fun函数正式开始执行，先执行fun函数中的print方法，然后进入while循环</p></li><li><p>程序遇到yield关键字，然后把yield想象成return,return了一个4之后，程序停止，<br>并没有执行赋值给res操作，此时next(g)语句执行完成，<br>所以输出的前两行（第一个是while上面的print的结果,第二个是return出的结果）是执行print(next(g))的结果</p></li><li><p>程序执行，输出20个星 </p></li><li><p>又开始执行下面的print(next(g)),这个时候是从刚才那个next程序停止的地方开始执行的，<br>也就是要执行res的赋值操作，这时候要注意，这个时候赋值操作的右边是没有值的<br>（因为刚才那个是return出去了，并没有给赋值操作的左边传参数），<br>所以这个时候res赋值是None,所以接着下面的输出就是res:None,</p></li><li><p>程序会继续在while里执行，又一次碰到yield,这个时候同样return 出4，然后程序停止，<br>print函数输出的4就是这次return出的4</p></li><li><p>带yield的函数是一个生成器，而不是一个函数了，<br>这个生成器有一个函数就是next函数，next就相当于“下一步”生成哪个数，<br>这一次的next开始的地方是接着上一次的next停止的地方执行的，</p></li></ol><pre><code>def fun():    print(&quot;开始...&quot;)    while True:        res = yield 4        print(&quot;res:&quot;,res)g = fun()print(next(g))print(&quot;*&quot;*20)print(g.send(7))</code></pre><p>send是发送一个参数给res的，因为上面讲到，return的时候，并没有把4赋值给res，<br>下次执行的时候只好继续执行赋值操作，只好赋值为None了，<br>而如果用send的话，开始执行的时候，先接着上一次（return 4之后）执行，先把7赋值给了res,<br>然后执行next的作用，遇见下一回的yield，return出结果后结束</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探redis</title>
      <link href="/2020/04/27/chu-tan-redis/"/>
      <url>/2020/04/27/chu-tan-redis/</url>
      
        <content type="html"><![CDATA[<p>redis数据库与关系型数据库不同，是一种key-value型数据库。其中key只能是字符串，而value则可以是String、Hash Map、List、Set、Zset。每种类型的使用方式都不同。</p><hr><ul><li>String</li></ul><pre><code>set k1 v1get k1set k1 v11 get k1del k1get k1mset k1 v1 k2 v2mget k1 k2</code></pre><hr><ul><li>Hash Map</li></ul><pre><code>hset h1 name liminghget h1 namehmset h1 name liming age 11hgetall h1</code></pre><hr><ul><li>List</li></ul><pre><code>lpush L1 v1lrange L1 0 0lpush L1 v2 v3lrange L1 0 -1rpush L1 r1 r2 r3lrange L1 0 -1lpop L1</code></pre><hr><ul><li>Set</li></ul><pre><code>sadd S1 v1smembers S1sadd S1 v2smembers S1</code></pre><hr><ul><li>ZSet</li></ul><pre><code>keys *type &quot;proxies:mzitu&quot;zcard &quot;proxies:mzity&quot;zrange &quot;proxies:mzitu 0 -1 withscores</code></pre><hr><ul><li>docker 安装redis</li></ul><pre><code>docker pull redisdocker image ls -adocker run -dit -p 6379:6379 redis:latest redis-serverdocker  start -i 5ddocker exec -it 5d redis-cli</code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我对manjaro的一些探索</title>
      <link href="/2020/04/27/wo-dui-manjaro-de-yi-xie-tan-suo/"/>
      <url>/2020/04/27/wo-dui-manjaro-de-yi-xie-tan-suo/</url>
      
        <content type="html"><![CDATA[<p>在初次接触linux时，我发现除了大众经常使用的Ubuntu系统外，还有人在使用manjaro。这个系统非常稳定，且不会像Ubuntu一样，经常找不到相应的软件。<br>但毕竟还是Ubuntu是老大哥，大树底下好乘凉，最终我还是选择了Ubuntu。不过我还是要记录一下我对manjaro的一些探索。</p><pre><code>sudo pacman-mirrors -c China更换镜像sudo pacman -Syyu更新软件git clone https://github.com/EvanMeek/Vanilla某个博主的i3配置sudo pacman -S docker安装dockersudo systemctl start docker启动docker服务systemctl enable docker开机自动启动docker</code></pre><p>OpenSSH</p><pre><code>sudo pacman -S openssh  #安装OpenSSH sudo systemctl enable sshd #开机自启sshd服务sudo systemctl start sshd #启动sshd服务 </code></pre><p>编辑器和shell</p><pre><code>sudo pacman -S vim安装vimsudo pacman -S code安装vscodesudo _E vim /etc/pacman.conf,去掉color注释sudo pacman -S  fish安装fishwhich fishchsh -s /user/bin/fish更改shell：bash--&gt;fishcurl -L https://get.oh-my.fish | fish安装oh my fish插件fish_config 更改fish配置omf install wttrwttr查看天气alias c clearfuncsave calias l &quot;ls -la&quot;funcsave lalias sudo &quot;sudo -E&quot;funcsave sudo fish shell下设置了 alias vim=nvim需要改回shell，才能用vim</code></pre><p>i3</p><pre><code>sudo pacman -S i3安装i3rebootwin(mod)+Enter开启终端win(mod)+Enter平行开启终端win(mod)+v+Enter竖直开启终端vim ~/.XresourcesXft.dpi:200变大字体reboot（mod）+1/2/3/4/5进入各个桌面vim ~/.config/i3/configset $mod Mod1bindsym $mod+Return exec alacrittymod）+Enter可以开启alacrittybindsym $mod+c exec firefox开启firefoxnew_window 1pixelexec_always  varietyexec_always comptonexec_always fcitx每次开启i3都会执行的命令(mod）+shift+r刷新i3---------------------------------------------------------------------------------------------------sudo pacman -S alacritty安装显卡渲染的终端sudo pacman -S dmenu安装（mod）+S可以在插入一个程序vim ~/.config/alacritty/alacritty.yml#Point sizesize:18调节alacritty字体#Background opactybackground_opacity:0.6设置半透明sudo pacman -S compton安装渲染器comptonsudo pacman -S fehfehsudo pacman -S varietyvariety换壁纸</code></pre><p>常用软件</p><pre><code>sudo pacman -S fcitx fcitx-im fcitx-configtoolsudo pacman -S fcitx-sougou搜狗输入法vim ~/.xprofileexport GTK_IM_MODEUL=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot;系统环境变量rebootsudo pacman-S chromiumsudo pacman-S libofficesudo pacman-S transmission安装下载工具sudo pacman-S ranger</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的conda使用</title>
      <link href="/2020/04/27/wo-de-conda-shi-yong/"/>
      <url>/2020/04/27/wo-de-conda-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>conda是目前最流行的Python环境管理工具。conda的使用还是比较简单的，没有什么难度，只要熟悉相关的命令，便可用起来非常顺手。</p><p>我在使用conda过程中，偶尔会去百度conda的相关命令，因此在这里记录下我常用的conda命令。</p><pre><code>conda list查看安装了哪些包conda env listconda info -e查看当前存在哪些虚拟环境conda update conda检查更新当前condaconda create -n your_env_name python=X.X（2.7、3.6等)创建python版本为X.X、名字为your_env_name的虚拟环境python --version可以检查当前python的版本source activate your_env_name(虚拟环境名称)conda install -n your_env_name [package]即可安装package到your_env_name中source deactivateconda deactivate退出python虚拟环境conda remove -n your_env_name(虚拟环境名称) --all删除虚拟环境conda remove --name your_env_name  package_name 、删除虚拟环境中的包conda create -n tf --clone rcnn克隆虚拟环境rcnn到tfconda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/peterjc123/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/conda config --set show_channel_urls yes设置清华镜像源conda config --show channels显示所有的镜像下载通道conda config --remove channels &#39;https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/＇删除镜像conda install nb_conda_kernels在jupyternotebook安装虚拟环境conda config --remove-key channels恢复到默认源cd ~vim .bashrcexport PYTHONIOENCODING=utf-8source .bashrc设置python输入输出环境变量pip freeze &gt;requirement.txt进入虚拟环境后,导出虚拟环境中的包信息</code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的i3、tmux、ranger使用</title>
      <link href="/2020/04/26/wo-de-i3-tmux-ranger-shi-yong/"/>
      <url>/2020/04/26/wo-de-i3-tmux-ranger-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="ranger"><a href="#ranger" class="headerlink" title="ranger"></a>ranger</h2><p>ranger是一个文件管理器，可以让我们在终端下方便快捷的操作文件和文件夹，我的ranger配置文件可以在我的<a href="https://github.com/beichen1994/MyLinuxConfig/tree/master/.config" target="_blank" rel="noopener">github仓库</a>中找到。</p><p>ranger的操作方式有点类似vim，下面是我的常用命令</p><pre><code>hjkl左下上右gh (/homegm (/mntgd (/devgp (/tmpcw 重命名pp 粘贴dd 剪切yy 复制space 选中</code></pre><p>在安装与配置ranger时，我是参照了以下教程</p><ul><li><p><a href="http://www.huangpan.net/posts/ji-ke/2019-08-21-ranger.html#toc-heading-75" target="_blank" rel="noopener">Ranger 用法总结</a></p></li><li><p><a href="https://www.cnblogs.com/zhangsf/p/3322627.html" target="_blank" rel="noopener">ranger文件管理器</a></p></li><li><p><a href="https://wiki.archlinux.org/index.php/ranger_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">ranger文档</a></p></li></ul><h2 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h2><p>tmux可以让我们在一个终端中同时开启多个会话，看起来更加酷炫，从此不再多个窗口来回切换。但是比较受限于屏幕大小，如果屏幕太小，窗口被切分的太小，看起来不舒服。</p><p>我常用的tmux命令如下:</p><hr><ul><li>启动与退出</li></ul><pre><code>tmuxexit</code></pre><hr><ul><li>会话（Session）管理</li></ul><pre><code>tmux lstmux new -s mysesstmux detachtmux attach -t mysesstmux switch -t mysesstmux rename-session -t 0 bctmux kill-session -t mysess</code></pre><hr><p>*窗格（pane）管理</p><pre><code>tmux split-window划分上下两个窗格tmux split-window -h划分左右两个窗格tmux select-pane -U光标移动到上方窗格tmux select-pane -D光标移动到下方窗格tmux select-pane -L光标移动到左方窗格tmux select-pane -R光标移动到右方窗格tmux swap-pane -U当前窗格上移tmux swap-pane -D当前窗格下移</code></pre><hr><ul><li>快捷键</li></ul><pre><code>Ctrl+b    %划分左右两个窗格Ctrl+b    &quot;划分上下两个窗格Ctrl+b    箭头光标移动到其他窗格Ctrl+b    {当前窗格左移Ctrl+b    }当前窗格右移Ctrl+b    Ctrl+o当前窗格上移Ctrl+b    Alt+o当前窗格下移Ctrl+b x关闭当前窗格Ctrl+b !将当前窗格拆分为一个独立窗口Ctrl+b q显示窗格编号窗口管理tmux new-window  -n bc1新建一个窗口tmux select-window -t bc1切换窗口tmux rename-window bc1重命名窗口快捷键Ctrl+b    c创建一个新窗口Ctrl+b    w从列表中选择窗口Ctrl+b    ,重命名窗口Ctrl+b    p切换到上一个窗口Ctrl+b    n切换到下一个窗口Ctrl+b    窗口编号切换到指定编号的窗口</code></pre><h2 id="i3"><a href="#i3" class="headerlink" title="i3"></a>i3</h2><p>i3是一个可以高度自定义的窗口管理器，对于i3的安装与配置，我是参考了以下4个教程。</p><ul><li><p><a href="https://blog.csdn.net/mkosto/article/details/97238317" target="_blank" rel="noopener">手把手教你使用Linux安装i3wm桌面</a></p></li><li><p><a href="https://www.jianshu.com/p/f4b3abc9a282" target="_blank" rel="noopener">Ubuntu18+i3配置</a></p></li><li><p><a href="https://www.jianshu.com/p/81917864271e" target="_blank" rel="noopener">ubuntu系统配置i3wm窗口管理器</a></p></li><li><p><a href="https://i3wm.org/docs/" target="_blank" rel="noopener">i3文档</a></p></li></ul><p>我的i3配置文件可以在我的<a href="https://github.com/beichen1994/MyLinuxConfig/tree/master/.config" target="_blank" rel="noopener">github仓库</a>中找到</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的vim使用</title>
      <link href="/2020/04/26/wo-de-vim-shi-yong/"/>
      <url>/2020/04/26/wo-de-vim-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;很多人都说vim是最好用的编辑器，抱着好奇的心理我尝试了。的确，好用是好用，但想改变windows记事本类型的编辑器的使用习惯好难。。。(捂脸)</p><p>&ensp;&ensp;vim使用需要搭配配置文件以及安装所需的插件，具体的配置文件.vimrc,可以参考我的<a href="https://github.com/beichen1994/MyLinuxConfig/blob/master/.vimrc" target="_blank" rel="noopener">github仓库</a></p><p>&ensp;&ensp;感兴趣的朋友也可以直接查看<a href="http://vimcdoc.sourceforge.net/" target="_blank" rel="noopener">vim文档</a></p><p>&ensp;&ensp;使用vim少不了命令操作，下面我介绍一下常用的vim命令，总结下来无外乎定位、插入、删除、替换、重复、匹配、查找、可视化</p><hr><ul><li>定位</li></ul><pre><code>左下上右hjkl 按word定位w 按单词尾定位e 按单词头定位b加上数字倍数5w2b9l直接行首0直接行尾$直接文本首gg直接文本尾G2G </code></pre><hr><ul><li>插入</li></ul><pre><code>在后方插入i 插入3个go3i go jj(ESC)在前方插入a插入o插入O</code></pre><hr><ul><li>删除</li></ul><pre><code>x  //删除X  //删除d  //删除dw  //删除wordde  //删除endd2e   //删除两个单词</code></pre><hr><pre><code>yy   //复制dd   //剪切pp   //粘贴</code></pre><hr><ul><li>替换</li></ul><pre><code>替换成ere  </code></pre><hr><ul><li>匹配与查找</li></ul><pre><code>匹配括号%查找wfw查找3个q3fq查找text  /text 查找下一个text/text n</code></pre><hr><ul><li>可视化</li></ul><pre><code>v   //可视化模式V   //可视化模式v e l d  //进入可视化，选中e，向右移动，删除</code></pre><hr><ul><li>退出</li></ul><pre><code>wq 存盘并退出wq! 存盘并强制退出q!  只强制退出</code></pre><p>由于我设置了配置文件，所以我的自定义退出方式如下</p><pre><code>,w 保存,q 退出</code></pre><ul><li>插件管理</li></ul><p>vim 的插件让vim如虎添翼，而要管理vim插件，则需要安装vim-plug.</p><p>在.vimrc文件中添加</p><pre><code>call plug#begin(&#39;~/.vim/plugged&#39;)Plug &#39;itchyny/lightline.vim&#39;call plug#end()</code></pre><p>保存后</p><pre><code>:PlugStatus:PlugInstall:PlugUpdate</code></pre><p>要是想要删除插件，在.vimrc中删除插件，然后</p><pre><code>:PlugClean</code></pre><p>升级vim-Plug本身</p><pre><code>:PlugUpgrade</code></pre><p>** YouCompleteMe插件安装</p><p><a href="https://blog.csdn.net/wycgi/article/details/88372516" target="_blank" rel="noopener">https://blog.csdn.net/wycgi/article/details/88372516</a><br>在安装过程中，还需要安装go语言环境golang</p><pre><code>sudo apt-get install golang&quot;</code></pre><p>也可能不需要go语言环境<br>这两个教程更靠谱一些</p><p><a href="https://vimjc.com/vim-youcompleteme-install.html" target="_blank" rel="noopener">https://vimjc.com/vim-youcompleteme-install.html</a></p><p><a href="https://www.cnblogs.com/YMaster/p/11209813.html" target="_blank" rel="noopener">https://www.cnblogs.com/YMaster/p/11209813.html</a></p><p>具体的配置文件与插件在我的github仓库中</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Ubuntu常用命令</title>
      <link href="/2020/04/26/wo-de-ubuntu-chang-yong-ming-ling/"/>
      <url>/2020/04/26/wo-de-ubuntu-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>&ensp;&ensp;既然使用了Ubuntu，那当然想能够发挥她的最大效用啦，为了可以更好的使用Ubuntu，有必要熟悉并掌握如下命令</p><hr><pre><code>切换到root用户su root为root用户设置密码sudo passwd root切换到wyq用户su wyq更新sudo apt-get update安装依赖包sudo apt --fix-broken install</code></pre><hr><ul><li>清理</li></ul><pre><code>清理旧版本的软件缓存apt-get autoclean清理所有软件缓存apt-get clean删除系统不再使用的孤立软件apt-get autoremove</code></pre><hr><ul><li>文件夹/文件常规操作</li></ul><pre><code>列出文件ls定位目录cd /home/spider打印工作目录pwd生成文件夹mkdir  spider生成1.txt文件touch 1.txt复制1.txt到2.txtcp /home/spider/1.txt  /home/wyq/Desktop/spider/2.txt重命名mv filename1 filename2移动文件 mv filename dirname删除文件/文件夹rm -rf filename/dirname批量删除find . -type f -name &quot;*something*&quot;find . -type f -name &quot;*something*&quot; -delete递归修改文件夹权限为777chmod -R 777 dirname</code></pre><hr><ul><li>压缩与解压缩</li></ul><pre><code>解压zipunzip FileName.zip 解压文件夹下所有zipls *.zip | xargs -n1 unzip -o将DirName本身压缩zip FileName.zip DirName 压缩，递归处理，将指定目录下的所有文件和子目录一并压缩zip -r FileName.zip DirNamerar压缩与解压sudo apt-get install rarrar a filename.rar filename/sudo apt-get install unrarunrar x update.rar update/unrar e update.rar解压p7zipsudo apt-get install p7zip7z x filename.7z -r -o/home/xx解压tartar -zxvf archive_name.tar.gztar -zxvf archive_name.tar.gz -C /tmp/extract_here/</code></pre><hr><ul><li>硬盘挂载</li></ul><pre><code>cd /mntmkdir disk查看所有硬盘sudo fdisk -l查看该硬盘的文件类型file -s /dev/sdb1挂载硬盘sudo mount -t ext4 /dev/sdb1 /mnt/disk/卸载硬盘sudo umount /dev/sdb1挂载外接盘mount  /dev/sdc1 /mnt修改文件夹下所有文件的权限sudo chmod -R 775 spider挂载固态硬盘时，提示mount:unknown filesystem type &#39;exfat&#39;安装exfat-fuse:sudo apt-get install exfat-fuse</code></pre><hr><ul><li>查找</li></ul><pre><code>查找软件安装目录sudo find / -name chromium-browserwhereis chromium-browserwhich chromium-browser</code></pre><hr><ul><li>ubuntu用命令启动程序</li></ul><pre><code>sudo vim ~/.bashrc然后，在打开的.bashrc中添加如下的数据：export PATH=$PATH:/opt/google/chrome  //后面是chrome所在的目录export PATH=$PATH:/opt/baidunetdisk然后，保存。重新打开一个新的终端google-chromebaidunetdisk</code></pre><ul><li><p>查看APT软件安装路径</p><pre><code>whereis vimwhereis geditwhereis pandoc</code></pre></li><li><p>设置环境变量<br>当用户要求系统运行一个程序而没有告诉它程序所在的完整路径时，系统出了在当前目录下寻找此程序外，还要到环境变量中指定的路径中寻找</p></li></ul><ol><li><p>home目录下的.bashrc文件,只针对一个特定的用户<br>vim ~/.bashrc</p></li><li><p>etc目录下的profile文件，针对所有用户<br>vim etc/profile</p></li></ol><pre><code>变量名=变量值JAVA_HOME = /opt/jdk-12.0.2CLASS_PATH = .PATH = $JAVA_HOME/bin:$PATHexport JAVA_HOME CLASSPATH PATH:wqsource .bashrc</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的ubuntu必备工具与软件</title>
      <link href="/2020/04/26/wo-de-ubuntu-bi-bei-gong-ju-yu-ruan-jian/"/>
      <url>/2020/04/26/wo-de-ubuntu-bi-bei-gong-ju-yu-ruan-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>&ensp;&ensp;我使用ubuntu也有一段时间了，越用感觉越好用，甚至一度想弃用windows，但无奈有些软件只有win版，无奈只能将ubuntu作为辅助工具使用。在使用过程中，我觉得有些软件是很好用且是必装的，在这里记录一下。</p><h2 id="必装软件"><a href="#必装软件" class="headerlink" title="必装软件"></a>必装软件</h2><ul><li>software update</li></ul><blockquote><p>这个不是软件，是ubuntu中的软件更新，一开始要注意配置其中的软件源，否则在安装或更新软件时，会报错。配置好之后，运行一下代码。</p></blockquote><pre class="line-numbers language-python"><code class="language-python">sudo apt<span class="token operator">-</span>get update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>synergy</li></ul><blockquote><p>这个软件简直不能再方便，可以让我们用一副键鼠同时操作多台电脑，比如我现在就在用Surface作为主机使用，将ubuntu作为客户机使用，只使用Surface的键鼠就可以同时操作Surface与Unbuntu.</p></blockquote><ul><li>ssh</li></ul><blockquote><p>这个就不多说了，远程连接必备，必装！</p></blockquote><ul><li>samba</li></ul><blockquote><p>这个软件可以将共享文件夹映射到windows，从此我们可以愉快的在windows中操作linxu中的文件夹了,访问速度还是比较快,但是别忘了给足权限喔。具体使用可以参考(<a href="https://www.cnblogs.com/gzdaijie/p/5194033.html)、(https://www.linuxidc.com/Linux/2018-11/155466.htm)" target="_blank" rel="noopener">https://www.cnblogs.com/gzdaijie/p/5194033.html)、(https://www.linuxidc.com/Linux/2018-11/155466.htm)</a></p></blockquote><ul><li>git</li></ul><blockquote><p>这个对于程序员来说并不陌生，平时写代码或者写作，都可以通过git同步到github平台。让我们的代码和文章管理更加规范化。但学习成本还是比较高，但是也是比较值得学习并使用的。</p></blockquote><ul><li>vscode</li></ul><blockquote><p>绝对良心的编辑器，有了她，你不再需要其他的编辑软件，有了她，她就是你的唯一！她就像一个变形金刚，你给了她什么插件，她就变成什么！</p></blockquote><blockquote><p>推荐本地插件:<br>Chinese Langeage Pack for Visual Studio Code、Python、 Markdownlint、Markdown Preview Enhanced、Latex Workshop、Remote-SSH、Remote-SSh:Editing Configuration Files、</p></blockquote><blockquote><p>推荐远程插件:<br>Chinese Langeage Pack for Visual Studio Code、Python、Python for Vscode、Jupyter、VSCode Jupyter Notebook Previewer、</p></blockquote><ul><li>vim</li></ul><blockquote><p>都说vim是最好用的编辑器，这个软件对于用惯了windows记事本之类编辑器的人来说简直是噩梦。我一开始使用的时候，一脸懵逼，这是什么玩意！学习成本也非常高。但如果真的用好了的话，那将是一种非凡的享受。我目前也是刚刚入门，对于vim的使用也是一知半解。vim使用的话，需要配合配置文件.vimrc以及需要安装一些插件vim-plug，感兴趣的话，可以参考一下我的github中有相关vim配置文件。</p></blockquote><ul><li>ranger</li></ul><blockquote><p>对于终端用户来说，这个软件是一个福音，他给了我们一个在终端中可视化操作文件的方式。安装方式也非常简单，直接在终端中输入 sudo apt-get install ranger即可。操作方式有点类似vim，具体操作指令也需要学习一下。</p></blockquote><ul><li>tmux</li></ul><blockquote><p>这个是一个终端多开的软件，我们可以在一个终端中同时打开多个会话，每个会话都可以相当于一个终端。从此我们不再需要打开好多个终端界面，来回进行切换！！</p></blockquote><ul><li>docker</li></ul><blockquote><p>这个相当于一个虚拟机，安装之后，可以进入到创建的的容器中，进行我们想要的操作。有时我们在共享我们的代码或者应用时，在我们的环境中是可以正常运行的，但到了别人的环境中就会报错。所以我们可以在docker容器中进行操作，将整个容器打包为镜像，分享给别人。在docker hub中已经有很多已经打包好的docker镜像供我们使用，如ubuntu镜像，mysql镜像，redis镜像等，所以我们在使用一些应用时，可以直接pull我们想要的镜像即可，方便快捷。</p></blockquote><blockquote><p>我之所以使用docker，是因为我想打造一个自己的Python环境，在这个容器里，我安装了各种我需要的Python环境，当我更换电脑时，我不用一遍遍的重复安装python环境，而是直接pull我的docker镜像，里面就已经包装好了我需要的Python环境。当然了我基于的还是ubuntu镜像。</p></blockquote><ul><li>miniconda</li></ul><blockquote><p>有时候docker中的Python环境需要开放端口进行浏览器的可视化，docker是没有界面的，所以不得已在本地中安装了miniconda。以备不时之需吧。</p></blockquote><ul><li><p>Java</p><blockquote><p>我觉得这个环境还是很有必要的</p></blockquote></li><li><p>npm+hexo</p></li></ul><blockquote><p>这个是为了写博客用的。</p></blockquote><ul><li>latex环境</li></ul><blockquote><p>这个是为了编写latex文件用的。</p></blockquote><pre><code>sudo apt-get install texlive-full</code></pre><ul><li>chrome google-access-helpser</li></ul><blockquote><p>我觉得chrome浏览器是最好用的浏览器之一，不过由于在国内需要科学上网才能更好的发挥chrome浏览器的功效，所以，我不得已使用了google-access-helper，虽然还是无法科学上网，但至少让我可以同步我的chrome标签。</p></blockquote><ul><li>smplayer</li></ul><blockquote><p>linux下的视频播放器，比较无感</p></blockquote><ul><li>shutter</li></ul><blockquote><p>linux下的截图软件，也比较无感</p></blockquote><ul><li>sougou输入法</li></ul><blockquote><p>没办法，中文输入始终是不太友好，这个也只能是将就使用</p></blockquote><ul><li>goldendict</li></ul><blockquote><p>ubuntu下的翻译软件，还在使用中，</p></blockquote><ul><li>teamviewer</li></ul><blockquote><p>异地远程控制软件，和通过ssh连接方式不同，通过外网来进行连接，所以有时候会变得非常卡顿。甚至被识别为商业用户，限制使用时间。现在已经不怎么使用了。</p></blockquote><ul><li>i3+lightdm(登录管理)+compton+feh</li></ul><blockquote><p>对于Ubuntu用户来说，使用gnome桌面软件可能与windows并无两样。我们可以使用i3桌面，非常轻量化，不会过多占用系统资源。通过i3配置文件自定义我们的桌面环境，最重要的是，它采用的是平铺式窗口，且可以半透明化，使用起来非常舒服。</p></blockquote><blockquote><p>如果使用i3，还需要同时安装compton（sudo apt-get install compton）(~/.config/compton.conf)和feh(sudo apt-get install feh)(feh –fig-scale ~/Pictures/wallpaper/wallpaper01.jpg)</p></blockquote><ul><li>pandoc</li></ul><p>好坑，用APT进行安装</p><pre><code>sudo apt-get install pandoc</code></pre><p>存在两个问题，一是检测到已经安装的latex，二是安装路径好像也不太对，也不知道该怎么添加环境变量</p><p>网上还有第二种方法</p><pre><code>sudo apt-get autoremove pandocsudo apt-get install cabal-install</code></pre><p>但我不敢用了</p><p>从<a href="https://pandoc.org/installing.html" target="_blank" rel="noopener">官网</a>上找到了deb安装包<br>直接</p><pre><code>sudo dpkg -i $DEB</code></pre><ul><li>FoxitReader</li></ul><p>这是一款pdf阅读器，网上都说okular是一个非常好的pdf阅读器，但对于我这个新手来说，实在不想花精力去摸索里面的快捷键了，我还是直接用傻瓜式的福熙阅读器吧。。。</p><ul><li>libreoffice</li></ul><p>类似于微软的全家桶，不过对于个人和企业来说，全部都是免费的。在ubuntu中有这么一个套件帮助处理文件也是还是不错的。不用每次都要到windows下进行处理</p><pre><code>sudo apt-get install libreofficesudo apt-get install libreoffice-l10n-zh-cn libreoffice-help-zh-cn打开libreoffice后，在设置界面设置中文界面</code></pre><ul><li>zotero</li></ul><p>本来是想在ubutnu上使用zotero，但无奈ubutnu上像Edge一样好用的pdf阅读器，并且也无法和word配合插入参考文献，因此将其移植到win上</p><p>zotero的使用需要经过简单的配置</p><p><a href="https://mp.weixin.qq.com/s/k-G0TzfnYbLA0dYXfDpMdg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/k-G0TzfnYbLA0dYXfDpMdg</a></p><p><a href="https://iseex.github.io/2020-03/zotero-scihub/" target="_blank" rel="noopener">https://iseex.github.io/2020-03/zotero-scihub/</a></p><p><a href="https://iseex.github.io/2020-03/zotero-shortdoi/" target="_blank" rel="noopener">https://iseex.github.io/2020-03/zotero-shortdoi/</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650456725&amp;idx=1&amp;sn=2f6e6fb3036933dfd71fde74556aded5&amp;chksm=83d1df53b4a656456fb129c8a56ad80d819005d94e9cc9ac689387093100b067aa1dbcde63a2&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650456725&amp;idx=1&amp;sn=2f6e6fb3036933dfd71fde74556aded5&amp;chksm=83d1df53b4a656456fb129c8a56ad80d819005d94e9cc9ac689387093100b067aa1dbcde63a2&amp;scene=21#wechat_redirect</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650454799&amp;idx=3&amp;sn=b89bf02dce73529d33728b418f055f98&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxNzgyMDg0MQ==&amp;mid=2650454799&amp;idx=3&amp;sn=b89bf02dce73529d33728b418f055f98&amp;scene=21#wechat_redirect</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&ensp;&ensp;以上都是我在使用ubuntu过程中一直在使用的工具和软件，如果对你有帮助，我会非常高兴。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
